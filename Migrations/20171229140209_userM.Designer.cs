// <auto-generated />
using EasyGrow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EasyGrow.Migrations
{
    [DbContext(typeof(PlantContext))]
    [Migration("20171229140209_userM")]
    partial class userM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EasyGrow.Models.AdditinalCriteries", b =>
                {
                    b.Property<int>("AdditinalCriteriesId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AreaSawn");

                    b.Property<int>("GeolocationId");

                    b.Property<int>("GroundwaterLevelId");

                    b.HasKey("AdditinalCriteriesId");

                    b.HasIndex("GeolocationId")
                        .IsUnique();

                    b.HasIndex("GroundwaterLevelId")
                        .IsUnique();

                    b.ToTable("AdditinalCriteries");
                });

            modelBuilder.Entity("EasyGrow.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EasyGrow.Models.Geolocation", b =>
                {
                    b.Property<int>("GeolocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("SeaLevel");

                    b.HasKey("GeolocationId");

                    b.ToTable("Geolocations");
                });

            modelBuilder.Entity("EasyGrow.Models.GroundwaterLevel", b =>
                {
                    b.Property<int>("GroundwaterLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("GroundwaterLevelId");

                    b.ToTable("GroundwaterLevels");
                });

            modelBuilder.Entity("EasyGrow.Models.Phase", b =>
                {
                    b.Property<int>("PhaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Duration");

                    b.HasKey("PhaseId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("EasyGrow.Models.PhasePlant", b =>
                {
                    b.Property<int>("PlantId");

                    b.Property<int>("PhaseId");

                    b.HasKey("PlantId", "PhaseId");

                    b.HasIndex("PhaseId");

                    b.ToTable("PhasePlant");
                });

            modelBuilder.Entity("EasyGrow.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdditinalCriteriesId");

                    b.Property<int>("Age");

                    b.Property<int>("AmountOfFertilizingDays");

                    b.Property<int>("AmountOfWater");

                    b.Property<int>("ClassId");

                    b.Property<int>("FrequencyOfWateringDays");

                    b.Property<string>("Info");

                    b.Property<string>("Name");

                    b.Property<int>("PhaseId");

                    b.HasKey("PlantId");

                    b.HasIndex("AdditinalCriteriesId")
                        .IsUnique();

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.HasIndex("PhaseId")
                        .IsUnique();

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("EasyGrow.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EasyGrow.Models.AdditinalCriteries", b =>
                {
                    b.HasOne("EasyGrow.Models.Geolocation")
                        .WithOne("AdditinalCriteries")
                        .HasForeignKey("EasyGrow.Models.AdditinalCriteries", "GeolocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyGrow.Models.GroundwaterLevel")
                        .WithOne("AdditinalCriteries")
                        .HasForeignKey("EasyGrow.Models.AdditinalCriteries", "GroundwaterLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyGrow.Models.PhasePlant", b =>
                {
                    b.HasOne("EasyGrow.Models.Phase", "Phase")
                        .WithMany("PhasePlants")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyGrow.Models.Plant", "Plant")
                        .WithMany("PhasePlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EasyGrow.Models.Plant", b =>
                {
                    b.HasOne("EasyGrow.Models.AdditinalCriteries", "AdditinalCriteries")
                        .WithOne("Plant")
                        .HasForeignKey("EasyGrow.Models.Plant", "AdditinalCriteriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyGrow.Models.Class")
                        .WithOne("Plant")
                        .HasForeignKey("EasyGrow.Models.Plant", "ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyGrow.Models.Phase")
                        .WithOne("Plant")
                        .HasForeignKey("EasyGrow.Models.Plant", "PhaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
